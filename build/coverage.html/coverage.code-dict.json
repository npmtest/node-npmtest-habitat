{"/home/travis/build/npmtest/node-npmtest-habitat/test.js":"/* istanbul instrument in package npmtest_habitat */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-habitat/lib.npmtest_habitat.js":"/* istanbul instrument in package npmtest_habitat */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_habitat = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_habitat = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-habitat/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-habitat && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_habitat */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_habitat\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_habitat.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_habitat.rollup.js'] =\n            local.assetsDict['/assets.npmtest_habitat.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_habitat.__dirname + '/lib.npmtest_habitat.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-habitat/node_modules/habitat/index.js":"const fs = require('fs');\nconst xtend = require('xtend')\nconst pathutil = require('path');\nconst fromCamelCase = require('./lib/from-camel-case')\nconst flatten = require('./lib/flatten')\nconst prefixKey = require('./lib/prefix-key');\n\nfunction habitat(prefix, defaults) {\n  if (!(this instanceof habitat))\n    return new habitat(prefix, defaults);\n  if (prefix) {\n    if (prefix.match(/[a-z]+[A-Z]/)) {\n      prefix = fromCamelCase(prefix);\n    }\n    this.prefix = prefix.toUpperCase();\n  }\n  if (defaults)\n    this.defaults = this.setDefaults(defaults);\n};\n\n/**\n * Setup default environment options\n */\n\nhabitat.prototype.setDefaults = function setDefaults(defaults, prefix) {\n  eachKey(defaults, function (key) {\n    var prefixedKey = prefixKey(prefix, key);\n    switch (typeof this.get(prefixedKey)) {\n      default:\n        break;\n      case 'undefined':\n        this.set(prefixedKey, defaults[key]);\n        break;\n      case 'object':\n        this.setDefaults(defaults[key], prefixedKey);\n        break;\n    }\n  }.bind(this));\n  return this;\n};\n\n/**\n * Get a key from the environment with the prefix is one was passed\n * in at construction time.\n *\n * @param {String} key The key to lookup in the environment\n * @param {Mixed} someDefault\n * @return {Mixed} Result of the key lookup\n */\n\nhabitat.prototype.get = function get(key, someDefault) {\n  var value, envkey;\n  if (key.match(/[a-z]+[A-Z]/))\n    return this.get(fromCamelCase(key), someDefault);\n\n  envkey = this.envkey(key);\n  value = process.env[envkey];\n\n  // try straight up\n  if (typeof value !== 'undefined')\n    return habitat.parse(value);\n\n  // try as an object\n  value = this.getAsObject(key);\n  if (typeof value !== 'undefined') {\n    if (Object.keys(value).length)\n      return value;\n  }\n\n  // fallback\n  return someDefault;\n};\n\n/**\n * Attempt to nativize things coming from the environment.\n *\n * @param {String} thing The string coming in from the environment\n * @return {Mixed} A native object if parseable, otherwise raw string\n */\n\nhabitat.parse = function parse(thing) {\n  var bool = /^(true|false)$/;\n\n  if (bool.test(thing))\n    return thing === 'true';\n  if (thing == parseInt(thing, 10))\n    return parseInt(thing, 10);\n  if (thing == parseFloat(thing))\n    return parseFloat(thing);\n\n  try {\n    return JSON.parse(thing);\n  } catch(e) {}\n\n  return thing;\n};\n\n\n/**\n * Set a value on the environment\n *\n * @param {String} key\n * @param {String} value\n * @param {Object} this\n */\n\nhabitat.prototype.set = function set(key, value) {\n  var envkey = this.envkey(key);\n  if (typeof value !== 'string' && typeof value !== 'number') {\n    if (typeof value === 'object') {\n      eachKey(value, function(childKey) {\n        this.set(prefixKey(key, childKey), value[childKey]);\n      }.bind(this));\n    }\n    value = JSON.stringify(value);\n  }\n  process.env[envkey] = value;\n  return this;\n};\n\nhabitat.prototype.unset = function unset(key) {\n  var envkey = this.envkey(key);\n  delete process.env[envkey];\n  return this;\n};\n\n/**\n * Set a temporary environment. Useful for testing.\n */\n\nhabitat.prototype.temp = function (obj, callback) {\n  var original = {};\n  eachKey(obj, function (key) {\n    var envkey = this.envkey(key);\n    original[key] = this.get(key);\n    this.set(key, obj[key]);\n  }.bind(this));\n\n  var reset = function reset() {\n    eachKey(original, function (key) {\n      if (typeof original[key] !== 'undefined')\n        this.set(key, original[key]);\n      else\n        delete this.unset(key);\n    }.bind(this));\n  }.bind(this);\n\n  if (callback.length === 0) {\n    callback();\n    return reset();\n  }\n\n  return callback(reset);\n};\n\n\n/**\n * Create the environment key string with the (optional) prefix.\n *\n * @param {String} key\n * @param {String} Prepared environment key string.\n */\n\nhabitat.prototype.envkey = function envkey(key) {\n  var envkey;\n  if (this.prefix)\n    envkey = this.prefix + '_' + key.toUpperCase();\n  else\n    envkey = key.toUpperCase();\n  return envkey;\n};\n\n/**\n * Get an object with all of the stuff in the environment\n *\n * @return {Object}\n */\n\nhabitat.prototype.all = function all(options) {\n  options = options || {};\n  var prefix = this.prefix;\n  var keys = this.rawKeys();\n  return keys.reduce(function (obj, rawKey) {\n    var key = rawKey;\n    var val = process.env[rawKey];\n    if (prefix) key = rawKey.replace(prefix + '_', '').toLowerCase();\n    obj[key] = options.raw ? val : habitat.parse(val);\n    return obj;\n  }, {});\n};\n\nhabitat.prototype.rawKeys = function rawKeys() {\n  var prefix = this.prefix;\n  var keys = Object.keys(process.env);\n  if (!prefix) return keys;\n  return keys.reduce(function (accum, key) {\n    if (key.indexOf(prefix) === 0)\n      accum.push(key);\n    return accum;\n  }, []);\n};\n\n/**\n * Get an object by key\n *\n * @param {String} keyPrefix\n * @return {Object}\n */\n\nhabitat.prototype.getAsObject = function getAsObject(keyPrefix) {\n  var envkey = this.envkey(keyPrefix);\n  var env = new habitat(envkey);\n  return env.all();\n};\n\n/**\n * Get a key from the environment without a prefix.\n *\n * @see habitat#get\n */\n\nhabitat.get = function get() {\n  var env = new habitat();\n  return env.get.apply(env, arguments)\n};\n\n/**\n * Load some things from an env file into the environment.\n *\n * @param {String} path The path to the environment file.\n * @return {Boolean} true if able to load, false otherwise.\n */\n\nhabitat.load = function load(path) {\n  path = path || '.env';\n  if (!fileExists(path))\n    return false;\n  var exports = fs.readFileSync(pathutil.resolve(path)).toString().trim()\n\n  if (exports.indexOf('{') == 0) {\n    try {\n      var params = flatten(JSON.parse(exports));\n      process.env = xtend(params, process.env)\n      return habitat;\n    } catch(e) {\n      throw new Error('could not parse environment file, expected json')\n    }\n  }\n\n  exports.split('\\n').filter(function(param) {\n    return !!param.match(/(.+?)=(.*)/);\n  }).map(function (param) {\n    var match = param.replace(/^export /i, '').match(/(.+?)=(.*)/);\n    var key = match[1];\n    var value = match[2];\n    if ((match = value.match(/^(?:'|\")(.*)(?:'|\")$/)))\n      value = match[1];\n    return { key: key, value: value };\n  }).forEach(function (param) {\n    if (typeof process.env[param.key] === \"undefined\") {\n      process.env[param.key] = param.value;\n    }\n  });\n\n  return habitat;\n};\n\nfunction eachKey(obj, fn) {\n  return Object.keys(obj).forEach(fn);\n}\n\n\nfunction fileExists(path) {\n  return (fs.existsSync || pathutil.existsSync)(path);\n}\n\nmodule.exports = habitat;\n","/home/travis/build/npmtest/node-npmtest-habitat/node_modules/habitat/lib/from-camel-case.js":"/**\n * Convert a camelcased string to an underscored string\n *\n * @param {String} input\n * @return {String} underscored string\n */\n\nmodule.exports = function fromCamelCase(input) {\n  var expression = /([a-z])([A-Z])/g;\n  return input.replace(expression, function (_, lower, upper) {\n    return lower + '_' + upper.toLowerCase();\n  });\n}\n","/home/travis/build/npmtest/node-npmtest-habitat/node_modules/habitat/lib/flatten.js":"const fromCamelCase = require('./from-camel-case')\nconst xtend = require('xtend')\nconst prefixKey = require('./prefix-key')\n\nfunction reduce(obj, fn, collector) {\n  var keys = Object.keys(obj);\n  for (var i = 0, len = keys.length; i < len; i++) {\n    collector = fn(collector, obj[keys[i]], keys[i])\n  }\n  return collector\n}\n\nmodule.exports = function flatten(obj, prefix) {\n  prefix = prefix || ''\n\n  function makeKey(s) {\n    return prefixKey(prefix, s)\n  }\n\n  return reduce(obj, function (result, val, key) {\n    const newKey = fromCamelCase(makeKey(key)).toUpperCase()\n\n    if (typeof val == 'object' && !Array.isArray(val))\n      return xtend(result, flatten(val, newKey))\n\n    else\n      result[newKey] = val\n\n    return result\n  }, {})\n}\n","/home/travis/build/npmtest/node-npmtest-habitat/node_modules/habitat/lib/prefix-key.js":"module.exports = function(prefix, key) {\n  return prefix ? prefix + '_' + key : key;\n};"}